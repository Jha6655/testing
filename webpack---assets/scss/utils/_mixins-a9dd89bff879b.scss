@use './breakpoints';
@use 'sass:math';
@use 'sass:map';

@mixin font-face($font-family, $file-path, $weight: 400, $style: normal) {
  @font-face {
    font-family: $font-family;
    src: url('#{$file-path}.otf');
    // src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'), url('#{$file-path}.woff') format('woff'), url('#{$file-path}.ttf') format('truetype');
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}


@mixin paddingRatio($width, $height) {
  padding-top: calc(#{$height} / #{$width} * 100%);
}


@mixin scale($property, $max-width, $min-width, $max-size, $min-size) {
  #{$property}: calc(
    #{$max-size} - (#{$max-width} - var(--viewport-width)) / (
        #{$max-width} - #{$min-width}
      ) * (#{$max-size} - #{$min-size})
  );
}

@mixin mscale($max-width, $min-width, $map) {
  @each $property, $value in $map {
    #{$property}: calc(
      #{nth($value, 1)} -
        (#{$max-width} - var(--viewport-width)) /
        (#{$max-width} - #{$min-width}) *
        (#{nth($value, 1)} - #{nth($value, 2)})
    );
  }
}
//---------------------------  Offsets table ------------------------------------

// Get offset size from table

@function foffset($color, $min-viewport) {
  $color-map: map.get($offsets, $color);
  @if map.has-key($color-map, $min-viewport) {
    @return map.get($color-map, $min-viewport);
  }
}

@mixin offset-media($prop, $color) {
  #{$prop}: foffset($color, bg);
  @media screen and (min-width: (map.get(breakpoints.$breakpoints-min, lg) * 1px)) {
    #{$prop}: foffset($color, lg);
  }
  @media screen and (max-width: (map.get(breakpoints.$breakpoints-max, bg) * 1px)) {
    #{$prop}: foffset($color, sm);
  }
  @media screen and (max-width: (map.get(breakpoints.$breakpoints-max, sm) * 1px)) {
    #{$prop}: foffset($color, xs);
  }
  @media screen and (max-width: (map.get(breakpoints.$breakpoints-max, xs) * 1px)) {
    #{$prop}: foffset($color, xxs);
  }
}

@mixin max($size) {
  @if map.has-key($breakpoints-max, $size) {
    @media (max-width: #{map.get($breakpoints-max, $size)}px) {
      @content;
    }
  } @else {
    @media (max-width: #{$size}px) {
      @content;
    }
  }
}

@mixin min($size) {
  @if map.has-key($breakpoints-min, $size) {
    @media (min-width: #{map.get($breakpoints-min, $size)}px) {
      @content;
    }
  } @else {
    @media (min-width: #{$size}px) {
      @content;
    }
  }
}

@mixin media($property,$normal, $lg, $bg, $sm, $xs) {
  #{$property}: $normal;
  @include min(lg) {
    #{$property}: $lg
  }
  @include max(bg) {
    #{$property}: $bg;
  }
  @include max(sm) {
    #{$property}: $sm;
  }
  @include max(xs) {
    #{$property}: $xs;
  }
}

@mixin h3 {
  line-height: 1;
  font-size: 4.7rem;
  font-weight: 400;
  @include min(lg) {
    font-size: 5.7rem;
  }
  @include max(bg) {
    font-size: 3.4rem;
  }
  @include max(sm) {
    font-size: 3.4rem;
  }
  @include max(xs) {
    font-size: 2.4rem;
  }
}

@mixin p {
  font-family: var(--font-mono-regular);
  font-size: 1.5rem;
  font-weight: 400;
  line-height: 1.3;
  @include min(lg) {
    font-size: 1.7rem;
  }
}

